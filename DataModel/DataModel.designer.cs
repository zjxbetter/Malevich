#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataModel
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CodeReview")]
	public partial class CodeReviewDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertChangeFile(ChangeFile instance);
    partial void UpdateChangeFile(ChangeFile instance);
    partial void DeleteChangeFile(ChangeFile instance);
    partial void InsertFileVersion(FileVersion instance);
    partial void UpdateFileVersion(FileVersion instance);
    partial void DeleteFileVersion(FileVersion instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertReview(Review instance);
    partial void UpdateReview(Review instance);
    partial void DeleteReview(Review instance);
    partial void InsertMailChangeList(MailChangeList instance);
    partial void UpdateMailChangeList(MailChangeList instance);
    partial void DeleteMailChangeList(MailChangeList instance);
    partial void InsertMailReview(MailReview instance);
    partial void UpdateMailReview(MailReview instance);
    partial void DeleteMailReview(MailReview instance);
    partial void InsertReviewer(Reviewer instance);
    partial void UpdateReviewer(Reviewer instance);
    partial void DeleteReviewer(Reviewer instance);
    partial void InsertChangeList(ChangeList instance);
    partial void UpdateChangeList(ChangeList instance);
    partial void DeleteChangeList(ChangeList instance);
    partial void InsertMailReviewRequest(MailReviewRequest instance);
    partial void UpdateMailReviewRequest(MailReviewRequest instance);
    partial void DeleteMailReviewRequest(MailReviewRequest instance);
    partial void InsertSourceControl(SourceControl instance);
    partial void UpdateSourceControl(SourceControl instance);
    partial void DeleteSourceControl(SourceControl instance);
    partial void InsertAttachment(Attachment instance);
    partial void UpdateAttachment(Attachment instance);
    partial void DeleteAttachment(Attachment instance);
    partial void InsertAuditRecord(AuditRecord instance);
    partial void UpdateAuditRecord(AuditRecord instance);
    partial void DeleteAuditRecord(AuditRecord instance);
    #endregion
		
		public CodeReviewDataContext() : 
				base(global::DataModel.Properties.Settings.Default.CodeReviewConnectionString4, mappingSource)
		{
			OnCreated();
		}
		
		public CodeReviewDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CodeReviewDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CodeReviewDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CodeReviewDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ChangeFile> ChangeFiles
		{
			get
			{
				return this.GetTable<ChangeFile>();
			}
		}
		
		public System.Data.Linq.Table<FileVersion> FileVersions
		{
			get
			{
				return this.GetTable<FileVersion>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Review> Reviews
		{
			get
			{
				return this.GetTable<Review>();
			}
		}
		
		public System.Data.Linq.Table<MailChangeList> MailChangeLists
		{
			get
			{
				return this.GetTable<MailChangeList>();
			}
		}
		
		public System.Data.Linq.Table<MailReview> MailReviews
		{
			get
			{
				return this.GetTable<MailReview>();
			}
		}
		
		public System.Data.Linq.Table<Reviewer> Reviewers
		{
			get
			{
				return this.GetTable<Reviewer>();
			}
		}
		
		public System.Data.Linq.Table<ChangeList> ChangeLists
		{
			get
			{
				return this.GetTable<ChangeList>();
			}
		}
		
		public System.Data.Linq.Table<MailReviewRequest> MailReviewRequests
		{
			get
			{
				return this.GetTable<MailReviewRequest>();
			}
		}
		
		public System.Data.Linq.Table<UserContext> UserContexts
		{
			get
			{
				return this.GetTable<UserContext>();
			}
		}
		
		public System.Data.Linq.Table<SourceControl> SourceControls
		{
			get
			{
				return this.GetTable<SourceControl>();
			}
		}
		
		public System.Data.Linq.Table<Attachment> Attachments
		{
			get
			{
				return this.GetTable<Attachment>();
			}
		}
		
		public System.Data.Linq.Table<AuditRecord> AuditRecords
		{
			get
			{
				return this.GetTable<AuditRecord>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddFile")]
		public int AddFile([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ChangeId", DbType="Int")] System.Nullable<int> changeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LocalFile", DbType="NVarChar(512)")] string localFile, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ServerFile", DbType="NVarChar(512)")] string serverFile, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> result)
		{
			IExecuteResult result1 = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), changeId, localFile, serverFile, result);
			result = ((System.Nullable<int>)(result1.GetParameterValue(3)));
			return ((int)(result1.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddReviewer")]
		public int AddReviewer([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReviewerAlias", DbType="NVarChar(50)")] string reviewerAlias, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ChangeListId", DbType="Int")] System.Nullable<int> changeListId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> result)
		{
			IExecuteResult result1 = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), reviewerAlias, changeListId, result);
			result = ((System.Nullable<int>)(result1.GetParameterValue(2)));
			return ((int)(result1.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddVersion")]
		public int AddVersion([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FileId", DbType="Int")] System.Nullable<int> fileId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Revision", DbType="Int")] System.Nullable<int> revision, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Action", DbType="Int")] System.Nullable<int> action, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeStamp", DbType="DateTime")] System.Nullable<System.DateTime> timeStamp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsText", DbType="Bit")] System.Nullable<bool> isText, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsFullText", DbType="Bit")] System.Nullable<bool> isFullText, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsRevisionBase", DbType="Bit")] System.Nullable<bool> isRevisionBase, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Text", DbType="VarChar(MAX)")] string text, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> result)
		{
			IExecuteResult result1 = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fileId, revision, action, timeStamp, isText, isFullText, isRevisionBase, text, result);
			result = ((System.Nullable<int>)(result1.GetParameterValue(8)));
			return ((int)(result1.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteChangeList")]
		public int DeleteChangeList([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ChangeId", DbType="Int")] System.Nullable<int> changeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), changeId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteComment")]
		public int DeleteComment([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CommentId", DbType="Int")] System.Nullable<int> commentId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), commentId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RemoveFile")]
		public int RemoveFile([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FileId", DbType="Int")] System.Nullable<int> fileId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fileId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SubmitChangeList")]
		public int SubmitChangeList([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ChangeId", DbType="Int")] System.Nullable<int> changeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), changeId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddComment")]
		public int AddComment([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FileVersion", DbType="Int")] System.Nullable<int> fileVersion, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Line", DbType="Int")] System.Nullable<int> line, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LineStamp", DbType="BigInt")] System.Nullable<long> lineStamp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Text", DbType="NVarChar(2048)")] string text, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> result)
		{
			IExecuteResult result1 = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fileVersion, line, lineStamp, text, result);
			result = ((System.Nullable<int>)(result1.GetParameterValue(4)));
			return ((int)(result1.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddReview")]
		public int AddReview([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ChangeId", DbType="Int")] System.Nullable<int> changeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Text", DbType="NVarChar(2048)")] string text, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Status", DbType="TinyInt")] System.Nullable<byte> status, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Result", DbType="Int")] ref System.Nullable<int> result)
		{
			IExecuteResult result1 = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), changeId, text, status, result);
			result = ((System.Nullable<int>)(result1.GetParameterValue(3)));
			return ((int)(result1.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SubmitReview")]
		public int SubmitReview([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReviewId", DbType="Int")] System.Nullable<int> reviewId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), reviewId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddChangeList")]
		public int AddChangeList([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SourceControl", DbType="Int")] System.Nullable<int> sourceControl, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserClient", DbType="NVarChar(50)")] string userClient, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CL", DbType="NVarChar(128)")] string cL, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(MAX)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TimeStamp", DbType="DateTime")] System.Nullable<System.DateTime> timeStamp, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> result)
		{
			IExecuteResult result1 = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sourceControl, userClient, cL, description, timeStamp, result);
			result = ((System.Nullable<int>)(result1.GetParameterValue(5)));
			return ((int)(result1.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddReviewRequest")]
		public int AddReviewRequest([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ChangeListId", DbType="Int")] System.Nullable<int> changeListId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReviewerAlias", DbType="NVarChar(50)")] string reviewerAlias)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), changeListId, reviewerAlias);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SetUserContext")]
		public int SetUserContext([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(10)")] string key, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string value)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), key, value);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddAttachment")]
		public int AddAttachment([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ChangeId", DbType="Int")] System.Nullable<int> changeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(128)")] string description, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Link", DbType="NVarChar(MAX)")] string link, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> result)
		{
			IExecuteResult result1 = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), changeId, description, link, result);
			result = ((System.Nullable<int>)(result1.GetParameterValue(3)));
			return ((int)(result1.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RenameChangeList")]
		public int RenameChangeList([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ChangeId", DbType="Int")] System.Nullable<int> changeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NewCL", DbType="NVarChar(128)")] string newCL)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), changeId, newCL);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ReopenChangeList")]
		public int ReopenChangeList([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ChangeId", DbType="Int")] System.Nullable<int> changeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), changeId);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChangeFile")]
	public partial class ChangeFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ChangeListId;
		
		private string _LocalFileName;
		
		private string _ServerFileName;
		
		private bool _IsActive;
		
		private EntitySet<FileVersion> _FileVersions;
		
		private EntityRef<ChangeList> _ChangeList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnChangeListIdChanging(int value);
    partial void OnChangeListIdChanged();
    partial void OnLocalFileNameChanging(string value);
    partial void OnLocalFileNameChanged();
    partial void OnServerFileNameChanging(string value);
    partial void OnServerFileNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public ChangeFile()
		{
			this._FileVersions = new EntitySet<FileVersion>(new Action<FileVersion>(this.attach_FileVersions), new Action<FileVersion>(this.detach_FileVersions));
			this._ChangeList = default(EntityRef<ChangeList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeListId", DbType="Int NOT NULL")]
		public int ChangeListId
		{
			get
			{
				return this._ChangeListId;
			}
			set
			{
				if ((this._ChangeListId != value))
				{
					if (this._ChangeList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeListIdChanging(value);
					this.SendPropertyChanging();
					this._ChangeListId = value;
					this.SendPropertyChanged("ChangeListId");
					this.OnChangeListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalFileName", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string LocalFileName
		{
			get
			{
				return this._LocalFileName;
			}
			set
			{
				if ((this._LocalFileName != value))
				{
					this.OnLocalFileNameChanging(value);
					this.SendPropertyChanging();
					this._LocalFileName = value;
					this.SendPropertyChanged("LocalFileName");
					this.OnLocalFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerFileName", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string ServerFileName
		{
			get
			{
				return this._ServerFileName;
			}
			set
			{
				if ((this._ServerFileName != value))
				{
					this.OnServerFileNameChanging(value);
					this.SendPropertyChanging();
					this._ServerFileName = value;
					this.SendPropertyChanged("ServerFileName");
					this.OnServerFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeFile_FileVersion", Storage="_FileVersions", ThisKey="Id", OtherKey="FileId")]
		public EntitySet<FileVersion> FileVersions
		{
			get
			{
				return this._FileVersions;
			}
			set
			{
				this._FileVersions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeList_ChangeFile", Storage="_ChangeList", ThisKey="ChangeListId", OtherKey="Id", IsForeignKey=true)]
		public ChangeList ChangeList
		{
			get
			{
				return this._ChangeList.Entity;
			}
			set
			{
				ChangeList previousValue = this._ChangeList.Entity;
				if (((previousValue != value) 
							|| (this._ChangeList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChangeList.Entity = null;
						previousValue.ChangeFiles.Remove(this);
					}
					this._ChangeList.Entity = value;
					if ((value != null))
					{
						value.ChangeFiles.Add(this);
						this._ChangeListId = value.Id;
					}
					else
					{
						this._ChangeListId = default(int);
					}
					this.SendPropertyChanged("ChangeList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FileVersions(FileVersion entity)
		{
			this.SendPropertyChanging();
			entity.ChangeFile = this;
		}
		
		private void detach_FileVersions(FileVersion entity)
		{
			this.SendPropertyChanging();
			entity.ChangeFile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileVersion")]
	public partial class FileVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _FileId;
		
		private int _Revision;
		
		private int _Action;
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
		private bool _IsText;
		
		private bool _IsFullText;
		
		private bool _IsRevisionBase;
		
		private string _Text;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<ChangeFile> _ChangeFile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFileIdChanging(int value);
    partial void OnFileIdChanged();
    partial void OnRevisionChanging(int value);
    partial void OnRevisionChanged();
    partial void OnActionChanging(int value);
    partial void OnActionChanged();
    partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeStampChanged();
    partial void OnIsTextChanging(bool value);
    partial void OnIsTextChanged();
    partial void OnIsFullTextChanging(bool value);
    partial void OnIsFullTextChanged();
    partial void OnIsRevisionBaseChanging(bool value);
    partial void OnIsRevisionBaseChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public FileVersion()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._ChangeFile = default(EntityRef<ChangeFile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileId", DbType="Int NOT NULL")]
		public int FileId
		{
			get
			{
				return this._FileId;
			}
			set
			{
				if ((this._FileId != value))
				{
					if (this._ChangeFile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIdChanging(value);
					this.SendPropertyChanging();
					this._FileId = value;
					this.SendPropertyChanged("FileId");
					this.OnFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Revision", DbType="Int NOT NULL")]
		public int Revision
		{
			get
			{
				return this._Revision;
			}
			set
			{
				if ((this._Revision != value))
				{
					this.OnRevisionChanging(value);
					this.SendPropertyChanging();
					this._Revision = value;
					this.SendPropertyChanged("Revision");
					this.OnRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="Int NOT NULL")]
		public int Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsText", DbType="Bit NOT NULL")]
		public bool IsText
		{
			get
			{
				return this._IsText;
			}
			set
			{
				if ((this._IsText != value))
				{
					this.OnIsTextChanging(value);
					this.SendPropertyChanging();
					this._IsText = value;
					this.SendPropertyChanged("IsText");
					this.OnIsTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFullText", DbType="Bit NOT NULL")]
		public bool IsFullText
		{
			get
			{
				return this._IsFullText;
			}
			set
			{
				if ((this._IsFullText != value))
				{
					this.OnIsFullTextChanging(value);
					this.SendPropertyChanging();
					this._IsFullText = value;
					this.SendPropertyChanged("IsFullText");
					this.OnIsFullTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRevisionBase", DbType="Bit NOT NULL")]
		public bool IsRevisionBase
		{
			get
			{
				return this._IsRevisionBase;
			}
			set
			{
				if ((this._IsRevisionBase != value))
				{
					this.OnIsRevisionBaseChanging(value);
					this.SendPropertyChanging();
					this._IsRevisionBase = value;
					this.SendPropertyChanged("IsRevisionBase");
					this.OnIsRevisionBaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="VarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileVersion_Comment", Storage="_Comments", ThisKey="Id", OtherKey="FileVersionId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeFile_FileVersion", Storage="_ChangeFile", ThisKey="FileId", OtherKey="Id", IsForeignKey=true)]
		public ChangeFile ChangeFile
		{
			get
			{
				return this._ChangeFile.Entity;
			}
			set
			{
				ChangeFile previousValue = this._ChangeFile.Entity;
				if (((previousValue != value) 
							|| (this._ChangeFile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChangeFile.Entity = null;
						previousValue.FileVersions.Remove(this);
					}
					this._ChangeFile.Entity = value;
					if ((value != null))
					{
						value.FileVersions.Add(this);
						this._FileId = value.Id;
					}
					else
					{
						this._FileId = default(int);
					}
					this.SendPropertyChanged("ChangeFile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.FileVersion = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.FileVersion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ReviewId;
		
		private int _FileVersionId;
		
		private int _Line;
		
		private long _LineStamp;
		
		private string _CommentText;
		
		private EntityRef<FileVersion> _FileVersion;
		
		private EntityRef<Review> _Review;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnReviewIdChanging(int value);
    partial void OnReviewIdChanged();
    partial void OnFileVersionIdChanging(int value);
    partial void OnFileVersionIdChanged();
    partial void OnLineChanging(int value);
    partial void OnLineChanged();
    partial void OnLineStampChanging(long value);
    partial void OnLineStampChanged();
    partial void OnCommentTextChanging(string value);
    partial void OnCommentTextChanged();
    #endregion
		
		public Comment()
		{
			this._FileVersion = default(EntityRef<FileVersion>);
			this._Review = default(EntityRef<Review>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewId", DbType="Int NOT NULL")]
		public int ReviewId
		{
			get
			{
				return this._ReviewId;
			}
			set
			{
				if ((this._ReviewId != value))
				{
					if (this._Review.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReviewIdChanging(value);
					this.SendPropertyChanging();
					this._ReviewId = value;
					this.SendPropertyChanged("ReviewId");
					this.OnReviewIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileVersionId", DbType="Int NOT NULL")]
		public int FileVersionId
		{
			get
			{
				return this._FileVersionId;
			}
			set
			{
				if ((this._FileVersionId != value))
				{
					if (this._FileVersion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileVersionIdChanging(value);
					this.SendPropertyChanging();
					this._FileVersionId = value;
					this.SendPropertyChanged("FileVersionId");
					this.OnFileVersionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line", DbType="Int NOT NULL")]
		public int Line
		{
			get
			{
				return this._Line;
			}
			set
			{
				if ((this._Line != value))
				{
					this.OnLineChanging(value);
					this.SendPropertyChanging();
					this._Line = value;
					this.SendPropertyChanged("Line");
					this.OnLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineStamp", DbType="BigInt NOT NULL")]
		public long LineStamp
		{
			get
			{
				return this._LineStamp;
			}
			set
			{
				if ((this._LineStamp != value))
				{
					this.OnLineStampChanging(value);
					this.SendPropertyChanging();
					this._LineStamp = value;
					this.SendPropertyChanged("LineStamp");
					this.OnLineStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentText", DbType="NVarChar(2048) NOT NULL", CanBeNull=false)]
		public string CommentText
		{
			get
			{
				return this._CommentText;
			}
			set
			{
				if ((this._CommentText != value))
				{
					this.OnCommentTextChanging(value);
					this.SendPropertyChanging();
					this._CommentText = value;
					this.SendPropertyChanged("CommentText");
					this.OnCommentTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileVersion_Comment", Storage="_FileVersion", ThisKey="FileVersionId", OtherKey="Id", IsForeignKey=true)]
		public FileVersion FileVersion
		{
			get
			{
				return this._FileVersion.Entity;
			}
			set
			{
				FileVersion previousValue = this._FileVersion.Entity;
				if (((previousValue != value) 
							|| (this._FileVersion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileVersion.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._FileVersion.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._FileVersionId = value.Id;
					}
					else
					{
						this._FileVersionId = default(int);
					}
					this.SendPropertyChanged("FileVersion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Review_Comment", Storage="_Review", ThisKey="ReviewId", OtherKey="Id", IsForeignKey=true)]
		public Review Review
		{
			get
			{
				return this._Review.Entity;
			}
			set
			{
				Review previousValue = this._Review.Entity;
				if (((previousValue != value) 
							|| (this._Review.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Review.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Review.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._ReviewId = value.Id;
					}
					else
					{
						this._ReviewId = default(int);
					}
					this.SendPropertyChanged("Review");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Review")]
	public partial class Review : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ChangeListId;
		
		private string _UserName;
		
		private System.DateTime _TimeStamp;
		
		private bool _IsSubmitted;
		
		private byte _OverallStatus;
		
		private string _CommentText;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<MailReview> _MailReviews;
		
		private EntityRef<ChangeList> _ChangeList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnChangeListIdChanging(int value);
    partial void OnChangeListIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnIsSubmittedChanging(bool value);
    partial void OnIsSubmittedChanged();
    partial void OnOverallStatusChanging(byte value);
    partial void OnOverallStatusChanged();
    partial void OnCommentTextChanging(string value);
    partial void OnCommentTextChanged();
    #endregion
		
		public Review()
		{
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._MailReviews = new EntitySet<MailReview>(new Action<MailReview>(this.attach_MailReviews), new Action<MailReview>(this.detach_MailReviews));
			this._ChangeList = default(EntityRef<ChangeList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeListId", DbType="Int NOT NULL")]
		public int ChangeListId
		{
			get
			{
				return this._ChangeListId;
			}
			set
			{
				if ((this._ChangeListId != value))
				{
					if (this._ChangeList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeListIdChanging(value);
					this.SendPropertyChanging();
					this._ChangeListId = value;
					this.SendPropertyChanged("ChangeListId");
					this.OnChangeListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSubmitted", DbType="Bit NOT NULL")]
		public bool IsSubmitted
		{
			get
			{
				return this._IsSubmitted;
			}
			set
			{
				if ((this._IsSubmitted != value))
				{
					this.OnIsSubmittedChanging(value);
					this.SendPropertyChanging();
					this._IsSubmitted = value;
					this.SendPropertyChanged("IsSubmitted");
					this.OnIsSubmittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverallStatus", DbType="TinyInt NOT NULL")]
		public byte OverallStatus
		{
			get
			{
				return this._OverallStatus;
			}
			set
			{
				if ((this._OverallStatus != value))
				{
					this.OnOverallStatusChanging(value);
					this.SendPropertyChanging();
					this._OverallStatus = value;
					this.SendPropertyChanged("OverallStatus");
					this.OnOverallStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentText", DbType="NVarChar(2048)")]
		public string CommentText
		{
			get
			{
				return this._CommentText;
			}
			set
			{
				if ((this._CommentText != value))
				{
					this.OnCommentTextChanging(value);
					this.SendPropertyChanging();
					this._CommentText = value;
					this.SendPropertyChanged("CommentText");
					this.OnCommentTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Review_Comment", Storage="_Comments", ThisKey="Id", OtherKey="ReviewId")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Review_MailReview", Storage="_MailReviews", ThisKey="Id", OtherKey="ReviewId")]
		public EntitySet<MailReview> MailReviews
		{
			get
			{
				return this._MailReviews;
			}
			set
			{
				this._MailReviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeList_Review", Storage="_ChangeList", ThisKey="ChangeListId", OtherKey="Id", IsForeignKey=true)]
		public ChangeList ChangeList
		{
			get
			{
				return this._ChangeList.Entity;
			}
			set
			{
				ChangeList previousValue = this._ChangeList.Entity;
				if (((previousValue != value) 
							|| (this._ChangeList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChangeList.Entity = null;
						previousValue.Reviews.Remove(this);
					}
					this._ChangeList.Entity = value;
					if ((value != null))
					{
						value.Reviews.Add(this);
						this._ChangeListId = value.Id;
					}
					else
					{
						this._ChangeListId = default(int);
					}
					this.SendPropertyChanged("ChangeList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Review = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Review = null;
		}
		
		private void attach_MailReviews(MailReview entity)
		{
			this.SendPropertyChanging();
			entity.Review = this;
		}
		
		private void detach_MailReviews(MailReview entity)
		{
			this.SendPropertyChanging();
			entity.Review = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MailChangeList")]
	public partial class MailChangeList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ReviewerId;
		
		private int _ChangeListId;
		
		private EntityRef<Reviewer> _Reviewer;
		
		private EntityRef<ChangeList> _ChangeList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnReviewerIdChanging(int value);
    partial void OnReviewerIdChanged();
    partial void OnChangeListIdChanging(int value);
    partial void OnChangeListIdChanged();
    #endregion
		
		public MailChangeList()
		{
			this._Reviewer = default(EntityRef<Reviewer>);
			this._ChangeList = default(EntityRef<ChangeList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewerId", DbType="Int NOT NULL")]
		public int ReviewerId
		{
			get
			{
				return this._ReviewerId;
			}
			set
			{
				if ((this._ReviewerId != value))
				{
					if (this._Reviewer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReviewerIdChanging(value);
					this.SendPropertyChanging();
					this._ReviewerId = value;
					this.SendPropertyChanged("ReviewerId");
					this.OnReviewerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeListId", DbType="Int NOT NULL")]
		public int ChangeListId
		{
			get
			{
				return this._ChangeListId;
			}
			set
			{
				if ((this._ChangeListId != value))
				{
					if (this._ChangeList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeListIdChanging(value);
					this.SendPropertyChanging();
					this._ChangeListId = value;
					this.SendPropertyChanged("ChangeListId");
					this.OnChangeListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reviewer_MailChangeList", Storage="_Reviewer", ThisKey="ReviewerId", OtherKey="Id", IsForeignKey=true)]
		public Reviewer Reviewer
		{
			get
			{
				return this._Reviewer.Entity;
			}
			set
			{
				Reviewer previousValue = this._Reviewer.Entity;
				if (((previousValue != value) 
							|| (this._Reviewer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reviewer.Entity = null;
						previousValue.MailChangeLists.Remove(this);
					}
					this._Reviewer.Entity = value;
					if ((value != null))
					{
						value.MailChangeLists.Add(this);
						this._ReviewerId = value.Id;
					}
					else
					{
						this._ReviewerId = default(int);
					}
					this.SendPropertyChanged("Reviewer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeList_MailChangeList", Storage="_ChangeList", ThisKey="ChangeListId", OtherKey="Id", IsForeignKey=true)]
		public ChangeList ChangeList
		{
			get
			{
				return this._ChangeList.Entity;
			}
			set
			{
				ChangeList previousValue = this._ChangeList.Entity;
				if (((previousValue != value) 
							|| (this._ChangeList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChangeList.Entity = null;
						previousValue.MailChangeLists.Remove(this);
					}
					this._ChangeList.Entity = value;
					if ((value != null))
					{
						value.MailChangeLists.Add(this);
						this._ChangeListId = value.Id;
					}
					else
					{
						this._ChangeListId = default(int);
					}
					this.SendPropertyChanged("ChangeList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MailReview")]
	public partial class MailReview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ReviewId;
		
		private EntityRef<Review> _Review;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnReviewIdChanging(int value);
    partial void OnReviewIdChanged();
    #endregion
		
		public MailReview()
		{
			this._Review = default(EntityRef<Review>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewId", DbType="Int NOT NULL")]
		public int ReviewId
		{
			get
			{
				return this._ReviewId;
			}
			set
			{
				if ((this._ReviewId != value))
				{
					if (this._Review.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReviewIdChanging(value);
					this.SendPropertyChanging();
					this._ReviewId = value;
					this.SendPropertyChanged("ReviewId");
					this.OnReviewIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Review_MailReview", Storage="_Review", ThisKey="ReviewId", OtherKey="Id", IsForeignKey=true)]
		public Review Review
		{
			get
			{
				return this._Review.Entity;
			}
			set
			{
				Review previousValue = this._Review.Entity;
				if (((previousValue != value) 
							|| (this._Review.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Review.Entity = null;
						previousValue.MailReviews.Remove(this);
					}
					this._Review.Entity = value;
					if ((value != null))
					{
						value.MailReviews.Add(this);
						this._ReviewId = value.Id;
					}
					else
					{
						this._ReviewId = default(int);
					}
					this.SendPropertyChanged("Review");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reviewer")]
	public partial class Reviewer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ReviewerAlias;
		
		private int _ChangeListId;
		
		private EntitySet<MailChangeList> _MailChangeLists;
		
		private EntityRef<ChangeList> _ChangeList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnReviewerAliasChanging(string value);
    partial void OnReviewerAliasChanged();
    partial void OnChangeListIdChanging(int value);
    partial void OnChangeListIdChanged();
    #endregion
		
		public Reviewer()
		{
			this._MailChangeLists = new EntitySet<MailChangeList>(new Action<MailChangeList>(this.attach_MailChangeLists), new Action<MailChangeList>(this.detach_MailChangeLists));
			this._ChangeList = default(EntityRef<ChangeList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewerAlias", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ReviewerAlias
		{
			get
			{
				return this._ReviewerAlias;
			}
			set
			{
				if ((this._ReviewerAlias != value))
				{
					this.OnReviewerAliasChanging(value);
					this.SendPropertyChanging();
					this._ReviewerAlias = value;
					this.SendPropertyChanged("ReviewerAlias");
					this.OnReviewerAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeListId", DbType="Int NOT NULL")]
		public int ChangeListId
		{
			get
			{
				return this._ChangeListId;
			}
			set
			{
				if ((this._ChangeListId != value))
				{
					if (this._ChangeList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeListIdChanging(value);
					this.SendPropertyChanging();
					this._ChangeListId = value;
					this.SendPropertyChanged("ChangeListId");
					this.OnChangeListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reviewer_MailChangeList", Storage="_MailChangeLists", ThisKey="Id", OtherKey="ReviewerId")]
		public EntitySet<MailChangeList> MailChangeLists
		{
			get
			{
				return this._MailChangeLists;
			}
			set
			{
				this._MailChangeLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeList_Reviewer", Storage="_ChangeList", ThisKey="ChangeListId", OtherKey="Id", IsForeignKey=true)]
		public ChangeList ChangeList
		{
			get
			{
				return this._ChangeList.Entity;
			}
			set
			{
				ChangeList previousValue = this._ChangeList.Entity;
				if (((previousValue != value) 
							|| (this._ChangeList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChangeList.Entity = null;
						previousValue.Reviewers.Remove(this);
					}
					this._ChangeList.Entity = value;
					if ((value != null))
					{
						value.Reviewers.Add(this);
						this._ChangeListId = value.Id;
					}
					else
					{
						this._ChangeListId = default(int);
					}
					this.SendPropertyChanged("ChangeList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MailChangeLists(MailChangeList entity)
		{
			this.SendPropertyChanging();
			entity.Reviewer = this;
		}
		
		private void detach_MailChangeLists(MailChangeList entity)
		{
			this.SendPropertyChanging();
			entity.Reviewer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChangeList")]
	public partial class ChangeList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SourceControlId;
		
		private string _UserName;
		
		private string _UserClient;
		
		private string _CL;
		
		private string _Description;
		
		private System.DateTime _TimeStamp;
		
		private int _Stage;
		
		private EntitySet<ChangeFile> _ChangeFiles;
		
		private EntitySet<Review> _Reviews;
		
		private EntitySet<MailChangeList> _MailChangeLists;
		
		private EntitySet<Reviewer> _Reviewers;
		
		private EntitySet<MailReviewRequest> _MailReviewRequests;
		
		private EntitySet<Attachment> _Attachments;
		
		private EntityRef<SourceControl> _SourceControl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSourceControlIdChanging(int value);
    partial void OnSourceControlIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserClientChanging(string value);
    partial void OnUserClientChanged();
    partial void OnCLChanging(string value);
    partial void OnCLChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnStageChanging(int value);
    partial void OnStageChanged();
    #endregion
		
		public ChangeList()
		{
			this._ChangeFiles = new EntitySet<ChangeFile>(new Action<ChangeFile>(this.attach_ChangeFiles), new Action<ChangeFile>(this.detach_ChangeFiles));
			this._Reviews = new EntitySet<Review>(new Action<Review>(this.attach_Reviews), new Action<Review>(this.detach_Reviews));
			this._MailChangeLists = new EntitySet<MailChangeList>(new Action<MailChangeList>(this.attach_MailChangeLists), new Action<MailChangeList>(this.detach_MailChangeLists));
			this._Reviewers = new EntitySet<Reviewer>(new Action<Reviewer>(this.attach_Reviewers), new Action<Reviewer>(this.detach_Reviewers));
			this._MailReviewRequests = new EntitySet<MailReviewRequest>(new Action<MailReviewRequest>(this.attach_MailReviewRequests), new Action<MailReviewRequest>(this.detach_MailReviewRequests));
			this._Attachments = new EntitySet<Attachment>(new Action<Attachment>(this.attach_Attachments), new Action<Attachment>(this.detach_Attachments));
			this._SourceControl = default(EntityRef<SourceControl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceControlId", DbType="Int NOT NULL")]
		public int SourceControlId
		{
			get
			{
				return this._SourceControlId;
			}
			set
			{
				if ((this._SourceControlId != value))
				{
					if (this._SourceControl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceControlIdChanging(value);
					this.SendPropertyChanging();
					this._SourceControlId = value;
					this.SendPropertyChanged("SourceControlId");
					this.OnSourceControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserClient", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserClient
		{
			get
			{
				return this._UserClient;
			}
			set
			{
				if ((this._UserClient != value))
				{
					this.OnUserClientChanging(value);
					this.SendPropertyChanging();
					this._UserClient = value;
					this.SendPropertyChanged("UserClient");
					this.OnUserClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CL", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string CL
		{
			get
			{
				return this._CL;
			}
			set
			{
				if ((this._CL != value))
				{
					this.OnCLChanging(value);
					this.SendPropertyChanging();
					this._CL = value;
					this.SendPropertyChanged("CL");
					this.OnCLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stage", DbType="Int NOT NULL")]
		public int Stage
		{
			get
			{
				return this._Stage;
			}
			set
			{
				if ((this._Stage != value))
				{
					this.OnStageChanging(value);
					this.SendPropertyChanging();
					this._Stage = value;
					this.SendPropertyChanged("Stage");
					this.OnStageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeList_ChangeFile", Storage="_ChangeFiles", ThisKey="Id", OtherKey="ChangeListId")]
		public EntitySet<ChangeFile> ChangeFiles
		{
			get
			{
				return this._ChangeFiles;
			}
			set
			{
				this._ChangeFiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeList_Review", Storage="_Reviews", ThisKey="Id", OtherKey="ChangeListId")]
		public EntitySet<Review> Reviews
		{
			get
			{
				return this._Reviews;
			}
			set
			{
				this._Reviews.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeList_MailChangeList", Storage="_MailChangeLists", ThisKey="Id", OtherKey="ChangeListId")]
		public EntitySet<MailChangeList> MailChangeLists
		{
			get
			{
				return this._MailChangeLists;
			}
			set
			{
				this._MailChangeLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeList_Reviewer", Storage="_Reviewers", ThisKey="Id", OtherKey="ChangeListId")]
		public EntitySet<Reviewer> Reviewers
		{
			get
			{
				return this._Reviewers;
			}
			set
			{
				this._Reviewers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeList_MailReviewRequest", Storage="_MailReviewRequests", ThisKey="Id", OtherKey="ChangeListId")]
		public EntitySet<MailReviewRequest> MailReviewRequests
		{
			get
			{
				return this._MailReviewRequests;
			}
			set
			{
				this._MailReviewRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeList_Attachment", Storage="_Attachments", ThisKey="Id", OtherKey="ChangeListId")]
		public EntitySet<Attachment> Attachments
		{
			get
			{
				return this._Attachments;
			}
			set
			{
				this._Attachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceControl_ChangeList", Storage="_SourceControl", ThisKey="SourceControlId", OtherKey="Id", IsForeignKey=true)]
		public SourceControl SourceControl
		{
			get
			{
				return this._SourceControl.Entity;
			}
			set
			{
				SourceControl previousValue = this._SourceControl.Entity;
				if (((previousValue != value) 
							|| (this._SourceControl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceControl.Entity = null;
						previousValue.ChangeLists.Remove(this);
					}
					this._SourceControl.Entity = value;
					if ((value != null))
					{
						value.ChangeLists.Add(this);
						this._SourceControlId = value.Id;
					}
					else
					{
						this._SourceControlId = default(int);
					}
					this.SendPropertyChanged("SourceControl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChangeFiles(ChangeFile entity)
		{
			this.SendPropertyChanging();
			entity.ChangeList = this;
		}
		
		private void detach_ChangeFiles(ChangeFile entity)
		{
			this.SendPropertyChanging();
			entity.ChangeList = null;
		}
		
		private void attach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.ChangeList = this;
		}
		
		private void detach_Reviews(Review entity)
		{
			this.SendPropertyChanging();
			entity.ChangeList = null;
		}
		
		private void attach_MailChangeLists(MailChangeList entity)
		{
			this.SendPropertyChanging();
			entity.ChangeList = this;
		}
		
		private void detach_MailChangeLists(MailChangeList entity)
		{
			this.SendPropertyChanging();
			entity.ChangeList = null;
		}
		
		private void attach_Reviewers(Reviewer entity)
		{
			this.SendPropertyChanging();
			entity.ChangeList = this;
		}
		
		private void detach_Reviewers(Reviewer entity)
		{
			this.SendPropertyChanging();
			entity.ChangeList = null;
		}
		
		private void attach_MailReviewRequests(MailReviewRequest entity)
		{
			this.SendPropertyChanging();
			entity.ChangeList = this;
		}
		
		private void detach_MailReviewRequests(MailReviewRequest entity)
		{
			this.SendPropertyChanging();
			entity.ChangeList = null;
		}
		
		private void attach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.ChangeList = this;
		}
		
		private void detach_Attachments(Attachment entity)
		{
			this.SendPropertyChanging();
			entity.ChangeList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MailReviewRequest")]
	public partial class MailReviewRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ReviewerAlias;
		
		private int _ChangeListId;
		
		private EntityRef<ChangeList> _ChangeList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnReviewerAliasChanging(string value);
    partial void OnReviewerAliasChanged();
    partial void OnChangeListIdChanging(int value);
    partial void OnChangeListIdChanged();
    #endregion
		
		public MailReviewRequest()
		{
			this._ChangeList = default(EntityRef<ChangeList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewerAlias", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ReviewerAlias
		{
			get
			{
				return this._ReviewerAlias;
			}
			set
			{
				if ((this._ReviewerAlias != value))
				{
					this.OnReviewerAliasChanging(value);
					this.SendPropertyChanging();
					this._ReviewerAlias = value;
					this.SendPropertyChanged("ReviewerAlias");
					this.OnReviewerAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeListId", DbType="Int NOT NULL")]
		public int ChangeListId
		{
			get
			{
				return this._ChangeListId;
			}
			set
			{
				if ((this._ChangeListId != value))
				{
					if (this._ChangeList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeListIdChanging(value);
					this.SendPropertyChanging();
					this._ChangeListId = value;
					this.SendPropertyChanged("ChangeListId");
					this.OnChangeListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeList_MailReviewRequest", Storage="_ChangeList", ThisKey="ChangeListId", OtherKey="Id", IsForeignKey=true)]
		public ChangeList ChangeList
		{
			get
			{
				return this._ChangeList.Entity;
			}
			set
			{
				ChangeList previousValue = this._ChangeList.Entity;
				if (((previousValue != value) 
							|| (this._ChangeList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChangeList.Entity = null;
						previousValue.MailReviewRequests.Remove(this);
					}
					this._ChangeList.Entity = value;
					if ((value != null))
					{
						value.MailReviewRequests.Add(this);
						this._ChangeListId = value.Id;
					}
					else
					{
						this._ChangeListId = default(int);
					}
					this.SendPropertyChanged("ChangeList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserContext")]
	public partial class UserContext
	{
		
		private int _Id;
		
		private string _UserName;
		
		private string _KeyName;
		
		private string _Value;
		
		public UserContext()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string KeyName
		{
			get
			{
				return this._KeyName;
			}
			set
			{
				if ((this._KeyName != value))
				{
					this._KeyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SourceControl")]
	public partial class SourceControl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Type;
		
		private string _Server;
		
		private string _Client;
		
		private string _Description;
		
		private string _WebsiteName;
		
		private EntitySet<ChangeList> _ChangeLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnServerChanging(string value);
    partial void OnServerChanged();
    partial void OnClientChanging(string value);
    partial void OnClientChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWebsiteNameChanging(string value);
    partial void OnWebsiteNameChanged();
    #endregion
		
		public SourceControl()
		{
			this._ChangeLists = new EntitySet<ChangeList>(new Action<ChangeList>(this.attach_ChangeLists), new Action<ChangeList>(this.detach_ChangeLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Server", DbType="NVarChar(50)")]
		public string Server
		{
			get
			{
				return this._Server;
			}
			set
			{
				if ((this._Server != value))
				{
					this.OnServerChanging(value);
					this.SendPropertyChanging();
					this._Server = value;
					this.SendPropertyChanged("Server");
					this.OnServerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Client", DbType="NVarChar(50)")]
		public string Client
		{
			get
			{
				return this._Client;
			}
			set
			{
				if ((this._Client != value))
				{
					this.OnClientChanging(value);
					this.SendPropertyChanging();
					this._Client = value;
					this.SendPropertyChanged("Client");
					this.OnClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebsiteName", DbType="NVarChar(50)")]
		public string WebsiteName
		{
			get
			{
				return this._WebsiteName;
			}
			set
			{
				if ((this._WebsiteName != value))
				{
					this.OnWebsiteNameChanging(value);
					this.SendPropertyChanging();
					this._WebsiteName = value;
					this.SendPropertyChanged("WebsiteName");
					this.OnWebsiteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceControl_ChangeList", Storage="_ChangeLists", ThisKey="Id", OtherKey="SourceControlId")]
		public EntitySet<ChangeList> ChangeLists
		{
			get
			{
				return this._ChangeLists;
			}
			set
			{
				this._ChangeLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChangeLists(ChangeList entity)
		{
			this.SendPropertyChanging();
			entity.SourceControl = this;
		}
		
		private void detach_ChangeLists(ChangeList entity)
		{
			this.SendPropertyChanging();
			entity.SourceControl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attachment")]
	public partial class Attachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ChangeListId;
		
		private System.DateTime _TimeStamp;
		
		private string _Description;
		
		private string _Link;
		
		private EntityRef<ChangeList> _ChangeList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnChangeListIdChanging(int value);
    partial void OnChangeListIdChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLinkChanging(string value);
    partial void OnLinkChanged();
    #endregion
		
		public Attachment()
		{
			this._ChangeList = default(EntityRef<ChangeList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeListId", DbType="Int NOT NULL")]
		public int ChangeListId
		{
			get
			{
				return this._ChangeListId;
			}
			set
			{
				if ((this._ChangeListId != value))
				{
					if (this._ChangeList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChangeListIdChanging(value);
					this.SendPropertyChanging();
					this._ChangeListId = value;
					this.SendPropertyChanged("ChangeListId");
					this.OnChangeListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(128)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Link", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Link
		{
			get
			{
				return this._Link;
			}
			set
			{
				if ((this._Link != value))
				{
					this.OnLinkChanging(value);
					this.SendPropertyChanging();
					this._Link = value;
					this.SendPropertyChanged("Link");
					this.OnLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChangeList_Attachment", Storage="_ChangeList", ThisKey="ChangeListId", OtherKey="Id", IsForeignKey=true)]
		public ChangeList ChangeList
		{
			get
			{
				return this._ChangeList.Entity;
			}
			set
			{
				ChangeList previousValue = this._ChangeList.Entity;
				if (((previousValue != value) 
							|| (this._ChangeList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChangeList.Entity = null;
						previousValue.Attachments.Remove(this);
					}
					this._ChangeList.Entity = value;
					if ((value != null))
					{
						value.Attachments.Add(this);
						this._ChangeListId = value.Id;
					}
					else
					{
						this._ChangeListId = default(int);
					}
					this.SendPropertyChanged("ChangeList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditRecord")]
	public partial class AuditRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _TimeStamp;
		
		private string _UserName;
		
		private int _ChangeListId;
		
		private string _Action;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnChangeListIdChanging(int value);
    partial void OnChangeListIdChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public AuditRecord()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeListId", DbType="Int NOT NULL")]
		public int ChangeListId
		{
			get
			{
				return this._ChangeListId;
			}
			set
			{
				if ((this._ChangeListId != value))
				{
					this.OnChangeListIdChanging(value);
					this.SendPropertyChanging();
					this._ChangeListId = value;
					this.SendPropertyChanged("ChangeListId");
					this.OnChangeListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
